# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'
  # For systems with an upstream API that could drift unexpectedly (like most SaaS systems, etc.),
  # we recommend testing at a regular interval not necessarily tied to code changes. This will 
  # ensure you are alerted to something breaking due to an API change, even if the code did not
  # change.
  # schedule:
  #   - cron: '0 13 * * *'

jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.18'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go mod download

    - name: Build
      run: |
        go build -v .

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.18'
      - uses: actions/checkout@v3
      - run: go generate ./...
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    # needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '0.12.*'
          - '0.13.*'
          - '0.14.*'
          - '0.15.*'
          - '1.0.*'
          - '1.1.*'
    steps:

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18'
        check-latest: true

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go mod download

    - name: Setup Terraform ${{ matrix.terraform }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix.terraform }}
        terraform_wrapper: false

    - name: Start the acceptance test stack
      run: docker compose -f ".github/workflows/acceptance-tests/docker-compose.yaml" up -d

    - name: Wait for healty services
      run: |
        sleep 60
        # FIXME
        # curl -s --retry 20 --retry-delay 10 --connect-timeout 5 --max-time 10 --retry-connrefused http://localhost:8000/healthz
        # curl -s --retry 20 --retry-delay 10 --connect-timeout 5 --max-time 10 --retry-connrefused http://localhost:3000/

    - name: Import fake data
      run: |
        # Import Gitea data
        docker compose -f ".github/workflows/acceptance-tests/docker-compose.yaml" exec gitea-mysql mysql -uroot -pgitea gitea -e 'SOURCE /tmp/gitea-data.sql'
        # Create repository
        curl -k -X POST "http://terraform:terraform@localhost:3000/api/v1/user/repos" -H "content-type: application/json" --data '{"name":"hook-test"}'
        # Import Drone data
        docker compose -f ".github/workflows/acceptance-tests/docker-compose.yaml" exec drone-mysql mysql -uroot -pdrone drone -e 'SOURCE /tmp/drone-data.sql'
        # Force Drone to sync repositories
        curl -XPOST -H 'Authorization: Bearer 5PVYqFHjdYWpzyOk6PVj9OUQULibBJeL' http://localhost:8000/api/user/repos

    - name: Run acceptance test
      timeout-minutes: 10
      env:
        TF_ACC: "1"
        DRONE_SERVER: http://localhost:8000/
        DRONE_TOKEN: 5PVYqFHjdYWpzyOk6PVj9OUQULibBJeL
        DRONE_USER: terraform
      run: make testacc

    - name: Stop the acceptance test stack
      if: always()
      run: docker-compose -f ".github/workflows/acceptance-tests/docker-compose.yaml" down
